"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CloudFrontDistribution = void 0;
const constructs_1 = require("constructs");
const aws_cloudfront_1 = require("aws-cdk-lib/aws-cloudfront");
const aws_cloudfront_origins_1 = require("aws-cdk-lib/aws-cloudfront-origins");
const core_1 = require("aws-cdk-lib/core");
const aws_certificatemanager_1 = require("aws-cdk-lib/aws-certificatemanager");
class CloudFrontDistribution extends constructs_1.Construct {
    constructor(scope, id, buildConfig, props) {
        super(scope, id);
        const certificate = aws_certificatemanager_1.Certificate.fromCertificateArn(this, "Certificate", buildConfig.certificateArn);
        const cloudFrontDistribution = new aws_cloudfront_1.Distribution(this, id, {
            defaultBehavior: {
                origin: new aws_cloudfront_origins_1.S3Origin(props.s3Bucket, {
                    originAccessIdentity: props.originAccessIdentity
                }),
                compress: true,
                viewerProtocolPolicy: aws_cloudfront_1.ViewerProtocolPolicy.REDIRECT_TO_HTTPS,
                allowedMethods: aws_cloudfront_1.AllowedMethods.ALLOW_GET_HEAD_OPTIONS
            },
            defaultRootObject: "index.html",
            certificate: certificate,
            domainNames: [buildConfig.url]
        });
        new core_1.CfnOutput(this, `${buildConfig.envPrefix}CloudfrontDomainUrl`, {
            value: cloudFrontDistribution.distributionDomainName,
            exportName: `${buildConfig.envPrefix}CloudfrontDomainUrl`,
        });
        this.distribution = cloudFrontDistribution;
    }
}
exports.CloudFrontDistribution = CloudFrontDistribution;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3RydWN0LWNmLWRpc3RyaWJ1dGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNvbnN0cnVjdC1jZi1kaXN0cmlidXRpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsMkNBQXVDO0FBQ3ZDLCtEQUtvQztBQUNwQywrRUFBOEQ7QUFHOUQsMkNBQTZDO0FBQzdDLCtFQUFpRTtBQU9qRSxNQUFhLHNCQUF1QixTQUFRLHNCQUFTO0lBSWpELFlBQVksS0FBZ0IsRUFBRSxFQUFVLEVBQUUsV0FBd0IsRUFBRSxLQUFzQjtRQUN0RixLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRWpCLE1BQU0sV0FBVyxHQUFHLG9DQUFXLENBQUMsa0JBQWtCLENBQUMsSUFBSSxFQUFFLGFBQWEsRUFBRSxXQUFXLENBQUMsY0FBYyxDQUFDLENBQUM7UUFFcEcsTUFBTSxzQkFBc0IsR0FBRyxJQUFJLDZCQUFZLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRTtZQUN0RCxlQUFlLEVBQUU7Z0JBQ2IsTUFBTSxFQUFFLElBQUksaUNBQVEsQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFO29CQUNqQyxvQkFBb0IsRUFBRSxLQUFLLENBQUMsb0JBQW9CO2lCQUNuRCxDQUNBO2dCQUNELFFBQVEsRUFBRSxJQUFJO2dCQUNkLG9CQUFvQixFQUFFLHFDQUFvQixDQUFDLGlCQUFpQjtnQkFDNUQsY0FBYyxFQUFFLCtCQUFjLENBQUMsc0JBQXNCO2FBQ3hEO1lBQ0QsaUJBQWlCLEVBQUUsWUFBWTtZQUMvQixXQUFXLEVBQUUsV0FBVztZQUN4QixXQUFXLEVBQUUsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDO1NBQ2pDLENBQUMsQ0FBQztRQUdILElBQUksZ0JBQVMsQ0FBQyxJQUFJLEVBQUUsR0FBRyxXQUFXLENBQUMsU0FBUyxxQkFBcUIsRUFBRTtZQUMvRCxLQUFLLEVBQUUsc0JBQXNCLENBQUMsc0JBQXNCO1lBQ3BELFVBQVUsRUFBRSxHQUFHLFdBQVcsQ0FBQyxTQUFTLHFCQUFxQjtTQUM1RCxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsWUFBWSxHQUFHLHNCQUFzQixDQUFDO0lBQy9DLENBQUM7Q0FDSjtBQWhDRCx3REFnQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tICdjb25zdHJ1Y3RzJztcbmltcG9ydCB7XG4gICAgT3JpZ2luQWNjZXNzSWRlbnRpdHksXG4gICAgQWxsb3dlZE1ldGhvZHMsXG4gICAgVmlld2VyUHJvdG9jb2xQb2xpY3ksXG4gICAgRGlzdHJpYnV0aW9uLFxufSBmcm9tIFwiYXdzLWNkay1saWIvYXdzLWNsb3VkZnJvbnRcIjtcbmltcG9ydCB7IFMzT3JpZ2luIH0gZnJvbSBcImF3cy1jZGstbGliL2F3cy1jbG91ZGZyb250LW9yaWdpbnNcIjtcbmltcG9ydCB7IEJ1aWxkQ29uZmlnIH0gZnJvbSAnLi9idWlsZC1jb25maWcnO1xuaW1wb3J0ICogYXMgczMgZnJvbSAnYXdzLWNkay1saWIvYXdzLXMzJztcbmltcG9ydCB7IENmbk91dHB1dCB9IGZyb20gXCJhd3MtY2RrLWxpYi9jb3JlXCI7XG5pbXBvcnQgeyBDZXJ0aWZpY2F0ZSB9IGZyb20gXCJhd3MtY2RrLWxpYi9hd3MtY2VydGlmaWNhdGVtYW5hZ2VyXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2xvdWRGcm9udFByb3BzIHtcbiAgICByZWFkb25seSBzM0J1Y2tldDogczMuQnVja2V0O1xuICAgIHJlYWRvbmx5IG9yaWdpbkFjY2Vzc0lkZW50aXR5OiBPcmlnaW5BY2Nlc3NJZGVudGl0eTtcbn1cblxuZXhwb3J0IGNsYXNzIENsb3VkRnJvbnREaXN0cmlidXRpb24gZXh0ZW5kcyBDb25zdHJ1Y3Qge1xuXG4gICAgcHVibGljIHJlYWRvbmx5IGRpc3RyaWJ1dGlvbjogRGlzdHJpYnV0aW9uO1xuXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZywgYnVpbGRDb25maWc6IEJ1aWxkQ29uZmlnLCBwcm9wczogQ2xvdWRGcm9udFByb3BzKSB7XG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZCk7XG5cbiAgICAgICAgY29uc3QgY2VydGlmaWNhdGUgPSBDZXJ0aWZpY2F0ZS5mcm9tQ2VydGlmaWNhdGVBcm4odGhpcywgXCJDZXJ0aWZpY2F0ZVwiLCBidWlsZENvbmZpZy5jZXJ0aWZpY2F0ZUFybik7XG5cbiAgICAgICAgY29uc3QgY2xvdWRGcm9udERpc3RyaWJ1dGlvbiA9IG5ldyBEaXN0cmlidXRpb24odGhpcywgaWQsIHtcbiAgICAgICAgICAgIGRlZmF1bHRCZWhhdmlvcjoge1xuICAgICAgICAgICAgICAgIG9yaWdpbjogbmV3IFMzT3JpZ2luKHByb3BzLnMzQnVja2V0LCB7XG4gICAgICAgICAgICAgICAgICAgIG9yaWdpbkFjY2Vzc0lkZW50aXR5OiBwcm9wcy5vcmlnaW5BY2Nlc3NJZGVudGl0eVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIGNvbXByZXNzOiB0cnVlLFxuICAgICAgICAgICAgICAgIHZpZXdlclByb3RvY29sUG9saWN5OiBWaWV3ZXJQcm90b2NvbFBvbGljeS5SRURJUkVDVF9UT19IVFRQUyxcbiAgICAgICAgICAgICAgICBhbGxvd2VkTWV0aG9kczogQWxsb3dlZE1ldGhvZHMuQUxMT1dfR0VUX0hFQURfT1BUSU9OU1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRlZmF1bHRSb290T2JqZWN0OiBcImluZGV4Lmh0bWxcIixcbiAgICAgICAgICAgIGNlcnRpZmljYXRlOiBjZXJ0aWZpY2F0ZSxcbiAgICAgICAgICAgIGRvbWFpbk5hbWVzOiBbYnVpbGRDb25maWcudXJsXVxuICAgICAgICB9KTtcblxuXG4gICAgICAgIG5ldyBDZm5PdXRwdXQodGhpcywgYCR7YnVpbGRDb25maWcuZW52UHJlZml4fUNsb3VkZnJvbnREb21haW5VcmxgLCB7XG4gICAgICAgICAgICB2YWx1ZTogY2xvdWRGcm9udERpc3RyaWJ1dGlvbi5kaXN0cmlidXRpb25Eb21haW5OYW1lLFxuICAgICAgICAgICAgZXhwb3J0TmFtZTogYCR7YnVpbGRDb25maWcuZW52UHJlZml4fUNsb3VkZnJvbnREb21haW5VcmxgLFxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLmRpc3RyaWJ1dGlvbiA9IGNsb3VkRnJvbnREaXN0cmlidXRpb247XG4gICAgfVxufSJdfQ==