"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getConfigByEnv = exports.getConfig = void 0;
const supportedEnvironments = ["dev", "prod", "test"];
const getConfig = (app) => {
    const defaultEnv = app.node.tryGetContext("defaultEnv");
    const awsAccountId = app.node.tryGetContext("awsAccountId");
    let env = app.node.tryGetContext("env");
    let isPipelineMode = app.node.tryGetContext("pipeline");
    // input invalidations
    if (!defaultEnv) {
        console.log("No default environment [defaultEnv] in ckd.json, Aborting build process");
        throw new Error("No value found for defaultEnv in cdk config");
    }
    if (!env) {
        console.log(`No build environment passed, so using the defaultEnv [${defaultEnv}]`);
        env = defaultEnv;
    }
    if (!supportedEnvironments.includes(env)) {
        throw new Error(`${env} is not in supported environments: ${supportedEnvironments.join(", ")}`);
    }
    // setting the build config values 
    console.log(`Loading the configs for build environment [${env}]`);
    console.log(`Pipeline mode is set to [${isPipelineMode}]`);
    const unparsedEnv = app.node.tryGetContext(env);
    return {
        env: env,
        region: ensureString(unparsedEnv, "region"),
        envPrefix: ensureString(unparsedEnv, "envPrefix"),
        url: ensureString(unparsedEnv, "url"),
        certificateArn: ensureString(unparsedEnv, "certificateArn"),
        awsAccountId: awsAccountId,
        pipelineMode: isPipelineMode
    };
};
exports.getConfig = getConfig;
const ensureString = (object, propName) => {
    if (!object[propName] || object[propName].trim().length === 0)
        throw new Error(propName + " does not exist or is empty");
    return object[propName];
};
const getConfigByEnv = (environment, app) => {
    if (!supportedEnvironments.includes(environment)) {
        throw new Error(`[${environment}] is not in supported environments: ${supportedEnvironments.join(", ")}`);
    }
    let isPipelineMode = app.node.tryGetContext("pipeline");
    const awsAccountId = app.node.tryGetContext("awsAccountId");
    const unparsedEnv = app.node.tryGetContext(environment);
    console.log(`Loading the configs for build environment using getConfigByEnv [${environment}]`);
    return {
        env: environment,
        region: ensureString(unparsedEnv, "region"),
        envPrefix: ensureString(unparsedEnv, "envPrefix"),
        url: ensureString(unparsedEnv, "url"),
        certificateArn: ensureString(unparsedEnv, "certificateArn"),
        awsAccountId: awsAccountId,
        pipelineMode: isPipelineMode
    };
};
exports.getConfigByEnv = getConfigByEnv;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVpbGQtY29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYnVpbGQtY29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUVBLE1BQU0scUJBQXFCLEdBQUcsQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBVSxDQUFDO0FBYXhELE1BQU0sU0FBUyxHQUFHLENBQUMsR0FBWSxFQUFlLEVBQUU7SUFFbkQsTUFBTSxVQUFVLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDeEQsTUFBTSxZQUFZLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDNUQsSUFBSSxHQUFHLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDeEMsSUFBSSxjQUFjLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLENBQUM7SUFFeEQsc0JBQXNCO0lBQ3RCLElBQUksQ0FBQyxVQUFVLEVBQUU7UUFDYixPQUFPLENBQUMsR0FBRyxDQUFDLHlFQUF5RSxDQUFDLENBQUM7UUFDdkYsTUFBTSxJQUFJLEtBQUssQ0FBQyw2Q0FBNkMsQ0FBQyxDQUFDO0tBQ2xFO0lBRUQsSUFBSSxDQUFDLEdBQUcsRUFBRTtRQUNOLE9BQU8sQ0FBQyxHQUFHLENBQUMseURBQXlELFVBQVUsR0FBRyxDQUFDLENBQUM7UUFDcEYsR0FBRyxHQUFHLFVBQVUsQ0FBQztLQUNwQjtJQUVELElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEVBQUU7UUFDdEMsTUFBTSxJQUFJLEtBQUssQ0FBQyxHQUFHLEdBQUcsc0NBQXNDLHFCQUFxQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDbkc7SUFFRCxtQ0FBbUM7SUFDbkMsT0FBTyxDQUFDLEdBQUcsQ0FBQyw4Q0FBOEMsR0FBRyxHQUFHLENBQUMsQ0FBQztJQUNsRSxPQUFPLENBQUMsR0FBRyxDQUFDLDRCQUE0QixjQUFjLEdBQUcsQ0FBQyxDQUFBO0lBRTFELE1BQU0sV0FBVyxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2hELE9BQU87UUFDSCxHQUFHLEVBQUUsR0FBRztRQUNSLE1BQU0sRUFBRSxZQUFZLENBQUMsV0FBVyxFQUFFLFFBQVEsQ0FBQztRQUMzQyxTQUFTLEVBQUUsWUFBWSxDQUFDLFdBQVcsRUFBRSxXQUFXLENBQUM7UUFDakQsR0FBRyxFQUFFLFlBQVksQ0FBQyxXQUFXLEVBQUUsS0FBSyxDQUFDO1FBQ3JDLGNBQWMsRUFBRSxZQUFZLENBQUMsV0FBVyxFQUFFLGdCQUFnQixDQUFDO1FBQzNELFlBQVksRUFBRSxZQUFZO1FBQzFCLFlBQVksRUFBRSxjQUFjO0tBQy9CLENBQUE7QUFDTCxDQUFDLENBQUE7QUFwQ1ksUUFBQSxTQUFTLGFBb0NyQjtBQUVELE1BQU0sWUFBWSxHQUFHLENBQUMsTUFBK0IsRUFBRSxRQUFnQixFQUFVLEVBQUU7SUFDL0UsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsTUFBTSxLQUFLLENBQUM7UUFDekQsTUFBTSxJQUFJLEtBQUssQ0FBQyxRQUFRLEdBQUcsNkJBQTZCLENBQUMsQ0FBQztJQUU5RCxPQUFPLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDLENBQUE7QUFFTSxNQUFNLGNBQWMsR0FBRyxDQUFDLFdBQWlDLEVBQUUsR0FBWSxFQUFlLEVBQUU7SUFFM0YsSUFBSSxDQUFDLHFCQUFxQixDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsRUFBRTtRQUM5QyxNQUFNLElBQUksS0FBSyxDQUFDLElBQUksV0FBVyx1Q0FBdUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUM3RztJQUVELElBQUksY0FBYyxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ3hELE1BQU0sWUFBWSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQzVELE1BQU0sV0FBVyxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBR3hELE9BQU8sQ0FBQyxHQUFHLENBQUMsbUVBQW1FLFdBQVcsR0FBRyxDQUFDLENBQUM7SUFDL0YsT0FBTztRQUNILEdBQUcsRUFBRSxXQUFXO1FBQ2hCLE1BQU0sRUFBRSxZQUFZLENBQUMsV0FBVyxFQUFFLFFBQVEsQ0FBQztRQUMzQyxTQUFTLEVBQUUsWUFBWSxDQUFDLFdBQVcsRUFBRSxXQUFXLENBQUM7UUFDakQsR0FBRyxFQUFFLFlBQVksQ0FBQyxXQUFXLEVBQUUsS0FBSyxDQUFDO1FBQ3JDLGNBQWMsRUFBRSxZQUFZLENBQUMsV0FBVyxFQUFFLGdCQUFnQixDQUFDO1FBQzNELFlBQVksRUFBRSxZQUFZO1FBQzFCLFlBQVksRUFBRSxjQUFjO0tBQy9CLENBQUE7QUFDTCxDQUFDLENBQUE7QUFyQlksUUFBQSxjQUFjLGtCQXFCMUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBjZGsgZnJvbSBcImF3cy1jZGstbGliXCI7XG5cbmNvbnN0IHN1cHBvcnRlZEVudmlyb25tZW50cyA9IFtcImRldlwiLCBcInByb2RcIiwgXCJ0ZXN0XCJdIGFzIGNvbnN0O1xudHlwZSBTdXBwb3J0ZWRFbnZpcm9ubWVudCA9IHR5cGVvZiBzdXBwb3J0ZWRFbnZpcm9ubWVudHNbbnVtYmVyXTtcblxuZXhwb3J0IGludGVyZmFjZSBCdWlsZENvbmZpZyB7XG4gICAgcmVhZG9ubHkgZW52OiBTdXBwb3J0ZWRFbnZpcm9ubWVudDtcbiAgICByZWFkb25seSByZWdpb246IHN0cmluZztcbiAgICByZWFkb25seSBlbnZQcmVmaXg6IHN0cmluZztcbiAgICByZWFkb25seSB1cmw6IHN0cmluZztcbiAgICByZWFkb25seSBjZXJ0aWZpY2F0ZUFybjogc3RyaW5nO1xuICAgIHJlYWRvbmx5IGF3c0FjY291bnRJZDogc3RyaW5nO1xuICAgIHJlYWRvbmx5IHBpcGVsaW5lTW9kZTogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGNvbnN0IGdldENvbmZpZyA9IChhcHA6IGNkay5BcHApOiBCdWlsZENvbmZpZyA9PiB7XG5cbiAgICBjb25zdCBkZWZhdWx0RW52ID0gYXBwLm5vZGUudHJ5R2V0Q29udGV4dChcImRlZmF1bHRFbnZcIik7XG4gICAgY29uc3QgYXdzQWNjb3VudElkID0gYXBwLm5vZGUudHJ5R2V0Q29udGV4dChcImF3c0FjY291bnRJZFwiKTtcbiAgICBsZXQgZW52ID0gYXBwLm5vZGUudHJ5R2V0Q29udGV4dChcImVudlwiKTtcbiAgICBsZXQgaXNQaXBlbGluZU1vZGUgPSBhcHAubm9kZS50cnlHZXRDb250ZXh0KFwicGlwZWxpbmVcIik7XG5cbiAgICAvLyBpbnB1dCBpbnZhbGlkYXRpb25zXG4gICAgaWYgKCFkZWZhdWx0RW52KSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiTm8gZGVmYXVsdCBlbnZpcm9ubWVudCBbZGVmYXVsdEVudl0gaW4gY2tkLmpzb24sIEFib3J0aW5nIGJ1aWxkIHByb2Nlc3NcIik7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vIHZhbHVlIGZvdW5kIGZvciBkZWZhdWx0RW52IGluIGNkayBjb25maWdcIik7XG4gICAgfVxuXG4gICAgaWYgKCFlbnYpIHtcbiAgICAgICAgY29uc29sZS5sb2coYE5vIGJ1aWxkIGVudmlyb25tZW50IHBhc3NlZCwgc28gdXNpbmcgdGhlIGRlZmF1bHRFbnYgWyR7ZGVmYXVsdEVudn1dYCk7XG4gICAgICAgIGVudiA9IGRlZmF1bHRFbnY7XG4gICAgfVxuXG4gICAgaWYgKCFzdXBwb3J0ZWRFbnZpcm9ubWVudHMuaW5jbHVkZXMoZW52KSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7ZW52fSBpcyBub3QgaW4gc3VwcG9ydGVkIGVudmlyb25tZW50czogJHtzdXBwb3J0ZWRFbnZpcm9ubWVudHMuam9pbihcIiwgXCIpfWApO1xuICAgIH1cblxuICAgIC8vIHNldHRpbmcgdGhlIGJ1aWxkIGNvbmZpZyB2YWx1ZXMgXG4gICAgY29uc29sZS5sb2coYExvYWRpbmcgdGhlIGNvbmZpZ3MgZm9yIGJ1aWxkIGVudmlyb25tZW50IFske2Vudn1dYCk7XG4gICAgY29uc29sZS5sb2coYFBpcGVsaW5lIG1vZGUgaXMgc2V0IHRvIFske2lzUGlwZWxpbmVNb2RlfV1gKVxuXG4gICAgY29uc3QgdW5wYXJzZWRFbnYgPSBhcHAubm9kZS50cnlHZXRDb250ZXh0KGVudik7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZW52OiBlbnYsXG4gICAgICAgIHJlZ2lvbjogZW5zdXJlU3RyaW5nKHVucGFyc2VkRW52LCBcInJlZ2lvblwiKSxcbiAgICAgICAgZW52UHJlZml4OiBlbnN1cmVTdHJpbmcodW5wYXJzZWRFbnYsIFwiZW52UHJlZml4XCIpLFxuICAgICAgICB1cmw6IGVuc3VyZVN0cmluZyh1bnBhcnNlZEVudiwgXCJ1cmxcIiksXG4gICAgICAgIGNlcnRpZmljYXRlQXJuOiBlbnN1cmVTdHJpbmcodW5wYXJzZWRFbnYsIFwiY2VydGlmaWNhdGVBcm5cIiksXG4gICAgICAgIGF3c0FjY291bnRJZDogYXdzQWNjb3VudElkLFxuICAgICAgICBwaXBlbGluZU1vZGU6IGlzUGlwZWxpbmVNb2RlXG4gICAgfVxufVxuXG5jb25zdCBlbnN1cmVTdHJpbmcgPSAob2JqZWN0OiB7IFtuYW1lOiBzdHJpbmddOiBhbnkgfSwgcHJvcE5hbWU6IHN0cmluZyk6IHN0cmluZyA9PiB7XG4gICAgaWYgKCFvYmplY3RbcHJvcE5hbWVdIHx8IG9iamVjdFtwcm9wTmFtZV0udHJpbSgpLmxlbmd0aCA9PT0gMClcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKHByb3BOYW1lICsgXCIgZG9lcyBub3QgZXhpc3Qgb3IgaXMgZW1wdHlcIik7XG5cbiAgICByZXR1cm4gb2JqZWN0W3Byb3BOYW1lXTtcbn1cblxuZXhwb3J0IGNvbnN0IGdldENvbmZpZ0J5RW52ID0gKGVudmlyb25tZW50OiBTdXBwb3J0ZWRFbnZpcm9ubWVudCwgYXBwOiBjZGsuQXBwKTogQnVpbGRDb25maWcgPT4ge1xuXG4gICAgaWYgKCFzdXBwb3J0ZWRFbnZpcm9ubWVudHMuaW5jbHVkZXMoZW52aXJvbm1lbnQpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgWyR7ZW52aXJvbm1lbnR9XSBpcyBub3QgaW4gc3VwcG9ydGVkIGVudmlyb25tZW50czogJHtzdXBwb3J0ZWRFbnZpcm9ubWVudHMuam9pbihcIiwgXCIpfWApO1xuICAgIH1cblxuICAgIGxldCBpc1BpcGVsaW5lTW9kZSA9IGFwcC5ub2RlLnRyeUdldENvbnRleHQoXCJwaXBlbGluZVwiKTtcbiAgICBjb25zdCBhd3NBY2NvdW50SWQgPSBhcHAubm9kZS50cnlHZXRDb250ZXh0KFwiYXdzQWNjb3VudElkXCIpO1xuICAgIGNvbnN0IHVucGFyc2VkRW52ID0gYXBwLm5vZGUudHJ5R2V0Q29udGV4dChlbnZpcm9ubWVudCk7XG5cblxuICAgIGNvbnNvbGUubG9nKGBMb2FkaW5nIHRoZSBjb25maWdzIGZvciBidWlsZCBlbnZpcm9ubWVudCB1c2luZyBnZXRDb25maWdCeUVudiBbJHtlbnZpcm9ubWVudH1dYCk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZW52OiBlbnZpcm9ubWVudCxcbiAgICAgICAgcmVnaW9uOiBlbnN1cmVTdHJpbmcodW5wYXJzZWRFbnYsIFwicmVnaW9uXCIpLFxuICAgICAgICBlbnZQcmVmaXg6IGVuc3VyZVN0cmluZyh1bnBhcnNlZEVudiwgXCJlbnZQcmVmaXhcIiksXG4gICAgICAgIHVybDogZW5zdXJlU3RyaW5nKHVucGFyc2VkRW52LCBcInVybFwiKSxcbiAgICAgICAgY2VydGlmaWNhdGVBcm46IGVuc3VyZVN0cmluZyh1bnBhcnNlZEVudiwgXCJjZXJ0aWZpY2F0ZUFyblwiKSxcbiAgICAgICAgYXdzQWNjb3VudElkOiBhd3NBY2NvdW50SWQsXG4gICAgICAgIHBpcGVsaW5lTW9kZTogaXNQaXBlbGluZU1vZGVcbiAgICB9XG59Il19